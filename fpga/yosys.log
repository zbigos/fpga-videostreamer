
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4008 (git sha1 83fc5cc2, clang 7.0.1-8+deb10u2 -fPIC -Os)


-- Parsing `src/vga_core.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: src/vga_core.v
Parsing Verilog input from `src/vga_core.v' to AST representation.
Generating RTLIL representation for module `\VGAcore'.
Warning: reg '\r' is assigned in a continuous assignment at src/vga_core.v:54.12-54.50.
Warning: reg '\b' is assigned in a continuous assignment at src/vga_core.v:55.12-55.50.
Warning: reg '\g' is assigned in a continuous assignment at src/vga_core.v:56.12-56.50.
Successfully finished Verilog frontend.

-- Parsing `src/vga_vistreamer.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: src/vga_vistreamer.v
Parsing Verilog input from `src/vga_vistreamer.v' to AST representation.
Generating RTLIL representation for module `\vga_vistreamer'.
Successfully finished Verilog frontend.

-- Parsing `src/pll.v' using frontend `verilog' --

3. Executing Verilog-2005 frontend: src/pll.v
Parsing Verilog input from `src/pll.v' to AST representation.
Generating RTLIL representation for module `\pll'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top vga_vistreamer -json fpga/vga_vistreamer.json' --

4. Executing SYNTH_ICE40 pass.

4.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

4.2. Executing HIERARCHY pass (managing design hierarchy).

4.2.1. Analyzing design hierarchy..
Top module:  \vga_vistreamer
Used module:     \VGAcore
Used module:     \pll

4.2.2. Analyzing design hierarchy..
Top module:  \vga_vistreamer
Used module:     \VGAcore
Used module:     \pll
Removed 0 unused modules.

4.3. Executing PROC pass (convert processes to netlists).

4.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$265 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1274$258 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$254 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1143$247 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1074$244 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1026$241 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:957$238 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:909$235 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$227 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:697$220 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$216 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:566$209 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:497$206 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:449$203 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:380$200 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:332$197 in module SB_DFFSR.
Marked 3 switch rules as full_case in process $proc$src/vga_core.v:58$19 in module VGAcore.
Removed a total of 0 dead cases.

4.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 8 redundant assignments.
Promoted 27 assignments to connections.

4.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$268'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$264'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$257'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$253'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$246'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$243'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$240'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$237'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$234'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$232'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$230'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$226'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$219'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$215'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$208'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$205'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$202'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$199'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$196'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$194'.
  Set init value: \Q = 1'0

4.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$265'.
Found async reset \R in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$254'.
Found async reset \S in `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1074$244'.
Found async reset \R in `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:957$238'.
Found async reset \S in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$227'.
Found async reset \R in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$216'.
Found async reset \S in `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:497$206'.
Found async reset \R in `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:380$200'.

4.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$268'.
Creating decoders for process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$265'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$264'.
Creating decoders for process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1274$258'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$257'.
Creating decoders for process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$254'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$253'.
Creating decoders for process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1143$247'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$246'.
Creating decoders for process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1074$244'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$243'.
Creating decoders for process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1026$241'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$240'.
Creating decoders for process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:957$238'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$237'.
Creating decoders for process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:909$235'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$234'.
Creating decoders for process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:866$233'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$232'.
Creating decoders for process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:830$231'.
Creating decoders for process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$230'.
Creating decoders for process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$227'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$226'.
Creating decoders for process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:697$220'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$219'.
Creating decoders for process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$216'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$215'.
Creating decoders for process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:566$209'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$208'.
Creating decoders for process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:497$206'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$205'.
Creating decoders for process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:449$203'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$202'.
Creating decoders for process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:380$200'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$199'.
Creating decoders for process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:332$197'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$196'.
Creating decoders for process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:289$195'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$194'.
Creating decoders for process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:253$193'.
Creating decoders for process `\VGAcore.$proc$src/vga_core.v:58$19'.
     1/17: $3\vscan_pos[10:0]
     2/17: $2\vscan_pos[10:0]
     3/17: $2\hscan_pos[10:0]
     4/17: $1\proposed_g[3:0] [3]
     5/17: $1\proposed_g[3:0] [2]
     6/17: $1\proposed_g[3:0] [1]
     7/17: $1\proposed_g[3:0] [0]
     8/17: $1\proposed_b[3:0] [2]
     9/17: $1\proposed_b[3:0] [1]
    10/17: $1\proposed_b[3:0] [0]
    11/17: $1\proposed_r[3:0] [2]
    12/17: $1\proposed_r[3:0] [1]
    13/17: $1\proposed_r[3:0] [0]
    14/17: $1\proposed_b[3:0] [3]
    15/17: $1\proposed_r[3:0] [3]
    16/17: $1\vscan_pos[10:0]
    17/17: $1\hscan_pos[10:0]

4.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$265'.
  created $adff cell `$procdff$509' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1274$258'.
  created $dff cell `$procdff$510' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$254'.
  created $adff cell `$procdff$511' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1143$247'.
  created $dff cell `$procdff$512' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1074$244'.
  created $adff cell `$procdff$513' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1026$241'.
  created $dff cell `$procdff$514' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:957$238'.
  created $adff cell `$procdff$515' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:909$235'.
  created $dff cell `$procdff$516' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:866$233'.
  created $dff cell `$procdff$517' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:830$231'.
  created $dff cell `$procdff$518' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$227'.
  created $adff cell `$procdff$519' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:697$220'.
  created $dff cell `$procdff$520' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$216'.
  created $adff cell `$procdff$521' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:566$209'.
  created $dff cell `$procdff$522' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:497$206'.
  created $adff cell `$procdff$523' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:449$203'.
  created $dff cell `$procdff$524' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:380$200'.
  created $adff cell `$procdff$525' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:332$197'.
  created $dff cell `$procdff$526' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:289$195'.
  created $dff cell `$procdff$527' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:253$193'.
  created $dff cell `$procdff$528' with positive edge clock.
Creating register for signal `\VGAcore.\hscan_pos' using process `\VGAcore.$proc$src/vga_core.v:58$19'.
  created $dff cell `$procdff$529' with positive edge clock.
Creating register for signal `\VGAcore.\vscan_pos' using process `\VGAcore.$proc$src/vga_core.v:58$19'.
  created $dff cell `$procdff$530' with positive edge clock.
Creating register for signal `\VGAcore.\proposed_r' using process `\VGAcore.$proc$src/vga_core.v:58$19'.
  created $dff cell `$procdff$531' with positive edge clock.
Creating register for signal `\VGAcore.\proposed_b' using process `\VGAcore.$proc$src/vga_core.v:58$19'.
  created $dff cell `$procdff$532' with positive edge clock.
Creating register for signal `\VGAcore.\proposed_g' using process `\VGAcore.$proc$src/vga_core.v:58$19'.
  created $dff cell `$procdff$533' with positive edge clock.

4.3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$268'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$265'.
Removing empty process `SB_DFFNES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1330$265'.
Removing empty process `SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$264'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1274$258'.
Removing empty process `SB_DFFNESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1274$258'.
Removing empty process `SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$257'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$254'.
Removing empty process `SB_DFFNER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1199$254'.
Removing empty process `SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$253'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1143$247'.
Removing empty process `SB_DFFNESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1143$247'.
Removing empty process `SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$246'.
Removing empty process `SB_DFFNS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1074$244'.
Removing empty process `SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$243'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1026$241'.
Removing empty process `SB_DFFNSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:1026$241'.
Removing empty process `SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$240'.
Removing empty process `SB_DFFNR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:957$238'.
Removing empty process `SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$237'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:909$235'.
Removing empty process `SB_DFFNSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:909$235'.
Removing empty process `SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$234'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:866$233'.
Removing empty process `SB_DFFNE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:866$233'.
Removing empty process `SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$232'.
Removing empty process `SB_DFFN.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:830$231'.
Removing empty process `SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$230'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$227'.
Removing empty process `SB_DFFES.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:753$227'.
Removing empty process `SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$226'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:697$220'.
Removing empty process `SB_DFFESS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:697$220'.
Removing empty process `SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$219'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$216'.
Removing empty process `SB_DFFER.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:622$216'.
Removing empty process `SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$215'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:566$209'.
Removing empty process `SB_DFFESR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:566$209'.
Removing empty process `SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$208'.
Removing empty process `SB_DFFS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:497$206'.
Removing empty process `SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$205'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:449$203'.
Removing empty process `SB_DFFSS.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:449$203'.
Removing empty process `SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$202'.
Removing empty process `SB_DFFR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:380$200'.
Removing empty process `SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$199'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:332$197'.
Removing empty process `SB_DFFSR.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:332$197'.
Removing empty process `SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$196'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:289$195'.
Removing empty process `SB_DFFE.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:289$195'.
Removing empty process `SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:0$194'.
Removing empty process `SB_DFF.$proc$/usr/local/bin/../share/yosys/ice40/cells_sim.v:253$193'.
Found and cleaned up 3 empty switches in `\VGAcore.$proc$src/vga_core.v:58$19'.
Removing empty process `VGAcore.$proc$src/vga_core.v:58$19'.
Cleaned up 21 empty switches.

4.4. Executing FLATTEN pass (flatten design).
Deleting now unused module pll.
Deleting now unused module VGAcore.
<suppressed ~2 debug messages>

4.5. Executing TRIBUF pass.

4.6. Executing DEMINOUT pass (demote inout ports to input or output).

4.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.
<suppressed ~17 debug messages>

4.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..
Removed 1 unused cells and 51 unused wires.
<suppressed ~2 debug messages>

4.9. Executing CHECK pass (checking for obvious problems).
Checking module vga_vistreamer...
Found and reported 0 problems.

4.10. Executing OPT pass (performing simple optimizations).

4.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.

4.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
Removed a total of 0 cells.

4.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vga_vistreamer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $flatten\core.$procmux$453.
    dead port 2/2 on $mux $flatten\core.$procmux$465.
Removed 2 multiplexer ports.
<suppressed ~15 debug messages>

4.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vga_vistreamer.
Performed a total of 0 changes.

4.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
Removed a total of 0 cells.

4.10.6. Executing OPT_DFF pass (perform DFF optimizations).

4.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

4.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.

4.10.9. Rerunning OPT passes. (Maybe there is more to do..)

4.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vga_vistreamer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

4.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vga_vistreamer.
Performed a total of 0 changes.

4.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
Removed a total of 0 cells.

4.10.13. Executing OPT_DFF pass (perform DFF optimizations).

4.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..

4.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.

4.10.16. Finished OPT passes. (There is nothing left to do.)

4.11. Executing FSM pass (extract and optimize FSM).

4.11.1. Executing FSM_DETECT pass (finding FSMs in design).

4.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..

4.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.12. Executing OPT pass (performing simple optimizations).

4.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.

4.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
Removed a total of 0 cells.

4.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vga_vistreamer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~15 debug messages>

4.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vga_vistreamer.
Performed a total of 0 changes.

4.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
Removed a total of 0 cells.

4.12.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $flatten\core.$procdff$533 ($dff) from module vga_vistreamer (D = $flatten\core.$add$src/vga_core.v:67$21_Y [7:4], Q = \core.proposed_g, rval = 4'0000).
Adding SRST signal on $flatten\core.$procdff$532 ($dff) from module vga_vistreamer (D = \core.vscan_pos [3:0], Q = \core.proposed_b, rval = 4'0000).
Adding SRST signal on $flatten\core.$procdff$531 ($dff) from module vga_vistreamer (D = $flatten\core.$add$src/vga_core.v:67$21_Y [3:0], Q = \core.proposed_r, rval = 4'0000).
Adding SRST signal on $flatten\core.$procdff$530 ($dff) from module vga_vistreamer (D = $flatten\core.$2\vscan_pos[10:0], Q = \core.vscan_pos, rval = 11'00000000000).
Adding SRST signal on $flatten\core.$procdff$529 ($dff) from module vga_vistreamer (D = $flatten\core.$add$src/vga_core.v:67$21_Y, Q = \core.hscan_pos, rval = 11'00000000000).

4.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..
Removed 16 unused cells and 7 unused wires.
<suppressed ~17 debug messages>

4.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.

4.12.9. Rerunning OPT passes. (Maybe there is more to do..)

4.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vga_vistreamer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vga_vistreamer.
Performed a total of 0 changes.

4.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.12.13. Executing OPT_DFF pass (perform DFF optimizations).

4.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.

4.12.16. Rerunning OPT passes. (Maybe there is more to do..)

4.12.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vga_vistreamer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.12.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vga_vistreamer.
Performed a total of 0 changes.

4.12.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
Removed a total of 0 cells.

4.12.20. Executing OPT_DFF pass (perform DFF optimizations).

4.12.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..

4.12.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.

4.12.23. Finished OPT passes. (There is nothing left to do.)

4.13. Executing WREDUCE pass (reducing word size of cells).
Removed cell vga_vistreamer.$flatten\core.$procmux$459 ($mux).
Removed top 1 bits (of 11) from port B of cell vga_vistreamer.$flatten\core.$eq$src/vga_core.v:90$24 ($eq).
Removed top 22 bits (of 32) from port B of cell vga_vistreamer.$flatten\core.$lt$src/vga_core.v:52$13 ($lt).
Removed top 22 bits (of 32) from port B of cell vga_vistreamer.$flatten\core.$ge$src/vga_core.v:52$12 ($ge).
Removed top 22 bits (of 32) from port B of cell vga_vistreamer.$flatten\core.$lt$src/vga_core.v:51$10 ($lt).
Removed top 31 bits (of 32) from port B of cell vga_vistreamer.$flatten\core.$ge$src/vga_core.v:51$9 ($ge).
Removed top 22 bits (of 32) from port B of cell vga_vistreamer.$flatten\core.$lt$src/vga_core.v:49$6 ($lt).
Removed top 22 bits (of 32) from port B of cell vga_vistreamer.$flatten\core.$ge$src/vga_core.v:49$5 ($ge).
Removed top 22 bits (of 32) from port B of cell vga_vistreamer.$flatten\core.$lt$src/vga_core.v:47$3 ($lt).
Removed top 31 bits (of 32) from port B of cell vga_vistreamer.$flatten\core.$ge$src/vga_core.v:47$2 ($ge).

4.14. Executing PEEPOPT pass (run peephole optimizers).

4.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.16. Executing SHARE pass (SAT-based resource sharing).

4.17. Executing TECHMAP pass (map to technology primitives).

4.17.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.17.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~192 debug messages>

4.18. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.

4.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..

4.20. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module vga_vistreamer:
  creating $macc model for $flatten\core.$add$src/vga_core.v:67$21 ($add).
  creating $macc model for $flatten\core.$add$src/vga_core.v:87$23 ($add).
  creating $alu model for $macc $flatten\core.$add$src/vga_core.v:87$23.
  creating $alu model for $macc $flatten\core.$add$src/vga_core.v:67$21.
  creating $alu model for $flatten\core.$ge$src/vga_core.v:47$2 ($ge): new $alu
  creating $alu model for $flatten\core.$ge$src/vga_core.v:49$5 ($ge): new $alu
  creating $alu model for $flatten\core.$ge$src/vga_core.v:51$9 ($ge): new $alu
  creating $alu model for $flatten\core.$ge$src/vga_core.v:52$12 ($ge): new $alu
  creating $alu model for $flatten\core.$lt$src/vga_core.v:47$3 ($lt): new $alu
  creating $alu model for $flatten\core.$lt$src/vga_core.v:49$6 ($lt): new $alu
  creating $alu model for $flatten\core.$lt$src/vga_core.v:51$10 ($lt): new $alu
  creating $alu model for $flatten\core.$lt$src/vga_core.v:52$13 ($lt): new $alu
  creating $alu cell for $flatten\core.$lt$src/vga_core.v:52$13: $auto$alumacc.cc:485:replace_alu$556
  creating $alu cell for $flatten\core.$lt$src/vga_core.v:51$10: $auto$alumacc.cc:485:replace_alu$567
  creating $alu cell for $flatten\core.$lt$src/vga_core.v:49$6: $auto$alumacc.cc:485:replace_alu$578
  creating $alu cell for $flatten\core.$lt$src/vga_core.v:47$3: $auto$alumacc.cc:485:replace_alu$589
  creating $alu cell for $flatten\core.$ge$src/vga_core.v:52$12: $auto$alumacc.cc:485:replace_alu$600
  creating $alu cell for $flatten\core.$ge$src/vga_core.v:51$9: $auto$alumacc.cc:485:replace_alu$609
  creating $alu cell for $flatten\core.$ge$src/vga_core.v:49$5: $auto$alumacc.cc:485:replace_alu$618
  creating $alu cell for $flatten\core.$ge$src/vga_core.v:47$2: $auto$alumacc.cc:485:replace_alu$627
  creating $alu cell for $flatten\core.$add$src/vga_core.v:67$21: $auto$alumacc.cc:485:replace_alu$636
  creating $alu cell for $flatten\core.$add$src/vga_core.v:87$23: $auto$alumacc.cc:485:replace_alu$639
  created 10 $alu and 0 $macc cells.

4.21. Executing OPT pass (performing simple optimizations).

4.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.

4.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
Removed a total of 0 cells.

4.21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vga_vistreamer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vga_vistreamer.
Performed a total of 0 changes.

4.21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
Removed a total of 0 cells.

4.21.6. Executing OPT_DFF pass (perform DFF optimizations).

4.21.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..
Removed 0 unused cells and 8 unused wires.
<suppressed ~1 debug messages>

4.21.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.

4.21.9. Rerunning OPT passes. (Maybe there is more to do..)

4.21.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vga_vistreamer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.21.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vga_vistreamer.
Performed a total of 0 changes.

4.21.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
Removed a total of 0 cells.

4.21.13. Executing OPT_DFF pass (perform DFF optimizations).

4.21.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..

4.21.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.

4.21.16. Finished OPT passes. (There is nothing left to do.)

4.22. Executing MEMORY pass.

4.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

4.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..

4.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..

4.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..

4.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.25. Executing TECHMAP pass (map to technology primitives).

4.25.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

4.25.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~5 debug messages>

4.26. Executing ICE40_BRAMINIT pass.

4.27. Executing OPT pass (performing simple optimizations).

4.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.
<suppressed ~2 debug messages>

4.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.27.3. Executing OPT_DFF pass (perform DFF optimizations).

4.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..
Removed 2 unused cells and 3 unused wires.
<suppressed ~3 debug messages>

4.27.5. Finished fast OPT passes.

4.28. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

4.29. Executing OPT pass (performing simple optimizations).

4.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.

4.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
Removed a total of 0 cells.

4.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \vga_vistreamer..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \vga_vistreamer.
Performed a total of 0 changes.

4.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
Removed a total of 0 cells.

4.29.6. Executing OPT_DFF pass (perform DFF optimizations).

4.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..

4.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.

4.29.9. Finished OPT passes. (There is nothing left to do.)

4.30. Executing ICE40_WRAPCARRY pass (wrap carries).

4.31. Executing TECHMAP pass (map to technology primitives).

4.31.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.31.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

4.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $sdff.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=8\B_WIDTH=9\Y_WIDTH=9 for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=11\Y_WIDTH=11 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=10\B_WIDTH=11\Y_WIDTH=11 for cells of type $alu.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=9\B_WIDTH=10\Y_WIDTH=10 for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~252 debug messages>

4.32. Executing OPT pass (performing simple optimizations).

4.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.
<suppressed ~270 debug messages>

4.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
<suppressed ~318 debug messages>
Removed a total of 106 cells.

4.32.3. Executing OPT_DFF pass (perform DFF optimizations).

4.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..
Removed 0 unused cells and 199 unused wires.
<suppressed ~1 debug messages>

4.32.5. Finished fast OPT passes.

4.33. Executing ICE40_OPT pass (performing simple optimizations).

4.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) vga_vistreamer.$auto$alumacc.cc:485:replace_alu$556.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$556.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) vga_vistreamer.$auto$alumacc.cc:485:replace_alu$567.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$567.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) vga_vistreamer.$auto$alumacc.cc:485:replace_alu$578.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$578.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) vga_vistreamer.$auto$alumacc.cc:485:replace_alu$589.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$578.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) vga_vistreamer.$auto$alumacc.cc:485:replace_alu$600.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$567.BB [1]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) vga_vistreamer.$auto$alumacc.cc:485:replace_alu$609.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$567.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) vga_vistreamer.$auto$alumacc.cc:485:replace_alu$618.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$578.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) vga_vistreamer.$auto$alumacc.cc:485:replace_alu$627.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$578.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) vga_vistreamer.$auto$alumacc.cc:485:replace_alu$636.slice[0].carry: CO=\core.hscan_pos [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) vga_vistreamer.$auto$alumacc.cc:485:replace_alu$639.slice[0].carry: CO=\core.vscan_pos [0]

4.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.

4.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

4.33.4. Executing OPT_DFF pass (perform DFF optimizations).

4.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..
Removed 4 unused cells and 0 unused wires.
<suppressed ~4 debug messages>

4.33.6. Rerunning OPT passes. (Removed registers in this run.)

4.33.7. Running ICE40 specific optimizations.

4.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.

4.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
Removed a total of 0 cells.

4.33.10. Executing OPT_DFF pass (perform DFF optimizations).

4.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..

4.33.12. Finished OPT passes. (There is nothing left to do.)

4.34. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

4.35. Executing TECHMAP pass (map to technology primitives).

4.35.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

4.35.2. Continuing TECHMAP pass.
Using template \$_SDFF_PP0_ for cells of type $_SDFF_PP0_.
No more expansions possible.
<suppressed ~56 debug messages>

4.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.

4.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping vga_vistreamer.$auto$alumacc.cc:485:replace_alu$636.slice[0].carry ($lut).
Mapping vga_vistreamer.$auto$alumacc.cc:485:replace_alu$639.slice[0].carry ($lut).

4.38. Executing ICE40_OPT pass (performing simple optimizations).

4.38.1. Running ICE40 specific optimizations.

4.38.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.
<suppressed ~28 debug messages>

4.38.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
<suppressed ~42 debug messages>
Removed a total of 14 cells.

4.38.4. Executing OPT_DFF pass (perform DFF optimizations).

4.38.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..
Removed 0 unused cells and 190 unused wires.
<suppressed ~1 debug messages>

4.38.6. Rerunning OPT passes. (Removed registers in this run.)

4.38.7. Running ICE40 specific optimizations.

4.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module vga_vistreamer.

4.38.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\vga_vistreamer'.
Removed a total of 0 cells.

4.38.10. Executing OPT_DFF pass (perform DFF optimizations).

4.38.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \vga_vistreamer..

4.38.12. Finished OPT passes. (There is nothing left to do.)

4.39. Executing TECHMAP pass (map to technology primitives).

4.39.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

4.39.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

4.40. Executing ABC pass (technology mapping using ABC).

4.40.1. Extracting gate netlist of module `\vga_vistreamer' to `<abc-temp-dir>/input.blif'..
Extracted 165 gates and 228 wires to a netlist network with 63 inputs and 50 outputs.

4.40.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      59.
ABC: Participating nodes from both networks       =     123.
ABC: Participating nodes from the first network   =      58. (  74.36 % of nodes)
ABC: Participating nodes from the second network  =      65. (  83.33 % of nodes)
ABC: Node pairs (any polarity)                    =      58. (  74.36 % of names can be moved)
ABC: Node pairs (same polarity)                   =      56. (  71.79 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

4.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       77
ABC RESULTS:        internal signals:      115
ABC RESULTS:           input signals:       63
ABC RESULTS:          output signals:       50
Removing temp directory.

4.41. Executing ICE40_WRAPCARRY pass (wrap carries).

4.42. Executing TECHMAP pass (map to technology primitives).

4.42.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

4.42.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~22 debug messages>
Removed 79 unused cells and 189 unused wires.

4.43. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       97
  1-LUT               23
  2-LUT               24
  3-LUT               29
  4-LUT               21

Eliminating LUTs.
Number of LUTs:       97
  1-LUT               23
  2-LUT               24
  3-LUT               29
  4-LUT               21

Combining LUTs.
Number of LUTs:       87
  1-LUT               23
  2-LUT               14
  3-LUT               29
  4-LUT               21

Eliminated 0 LUTs.
Combined 10 LUTs.
<suppressed ~486 debug messages>

4.44. Executing TECHMAP pass (map to technology primitives).

4.44.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.44.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0101101011110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111100011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100101011111111 for cells of type $lut.
No more expansions possible.
<suppressed ~376 debug messages>
Removed 0 unused cells and 196 unused wires.

4.45. Executing AUTONAME pass.
Renamed 1709 objects in module vga_vistreamer (23 iterations).
<suppressed ~258 debug messages>

4.46. Executing HIERARCHY pass (managing design hierarchy).

4.46.1. Analyzing design hierarchy..
Top module:  \vga_vistreamer

4.46.2. Analyzing design hierarchy..
Top module:  \vga_vistreamer
Removed 0 unused modules.

4.47. Printing statistics.

=== vga_vistreamer ===

   Number of wires:                 64
   Number of wire bits:            366
   Number of public wires:          64
   Number of public wire bits:     366
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                217
     SB_CARRY                       95
     SB_DFFSR                       34
     SB_LUT4                        87
     SB_PLL40_PAD                    1

4.48. Executing CHECK pass (checking for obvious problems).
Checking module vga_vistreamer...
Found and reported 0 problems.

4.49. Executing JSON backend.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 8efabaece9, CPU: user 0.29s system 0.00s, MEM: 56.11 MB peak
Yosys 0.9+4008 (git sha1 83fc5cc2, clang 7.0.1-8+deb10u2 -fPIC -Os)
Time spent: 28% 13x read_verilog (0 sec), 22% 1x abc (0 sec), ...
